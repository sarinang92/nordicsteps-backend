package com.myproject.mapper;

import com.myproject.dto.CartItemRequestDTO;
import com.myproject.dto.CartItemResponseDTO;
import com.myproject.model.CartItems; // Ensure this is CartItems (plural)
import com.myproject.model.Products;   // Ensure this is Products (plural)
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget; // Import MappingTarget for update methods
import org.mapstruct.NullValuePropertyMappingStrategy;

import java.util.List;

@Mapper(componentModel = "spring", nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
public interface CartItemMapper {

    // Mapping CartItems entity to CartItemResponseDTO for responses
    @Mapping(source = "cartItemId", target = "cartItemId")
    @Mapping(source = "product.productId", target = "productId")
    @Mapping(source = "quantity", target = "quantity")
    @Mapping(source = "size", target = "size")
    @Mapping(source = "product.name", target = "productName")
    @Mapping(source = "product.imageUrl", target = "productImageUrl")
    @Mapping(source = "product.currentPrice", target = "productCurrentPrice")
    @Mapping(source = "totalPrice", target = "totalPrice")
    CartItemResponseDTO toCartItemResponseDTO(CartItems cartItems);

    List<CartItemResponseDTO> toCartItemResponseDTOs(List<CartItems> cartItems);

    // Mapping CartItemRequestDTO to CartItems entity for creating new items
    // Note: 'cart', 'product', and 'totalPrice' will be set in the service layer, not by the mapper.
    @Mapping(target = "cartItemId", ignore = true) // Auto-generated by DB for new items
    @Mapping(target = "cart", ignore = true)       // Set in service based on user's active cart
    @Mapping(target = "product", ignore = true)    // Set in service after fetching Products
    @Mapping(target = "totalPrice", ignore = true) // Calculated in service
    CartItems toCartItems(CartItemRequestDTO cartItemRequestDTO);

    // Method to update an existing CartItems entity from a DTO (useful for partial updates)
    // MapStruct will update the fields specified in CartItemRequestDTO onto the existing CartItems entity.
    // Ensure you only map fields that are expected to change via the DTO; relationships and IDs are ignored.
    @Mapping(target = "cartItemId", ignore = true) // ID is immutable for updates
    @Mapping(target = "cart", ignore = true)       // Cart association is managed by service, not updated here
    @Mapping(target = "product", ignore = true)    // Product association is managed by service, not updated here
    @Mapping(target = "totalPrice", ignore = true) // Recalculated in service
    void updateCartItemFromDto(CartItemRequestDTO cartItemRequestDTO, @MappingTarget CartItems cartItems);
}